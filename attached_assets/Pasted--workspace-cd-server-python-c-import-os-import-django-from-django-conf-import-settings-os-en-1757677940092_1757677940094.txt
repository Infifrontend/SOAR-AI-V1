~/workspace$ cd server && python -c " import os import django from django.conf import settings os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'soar_backend.settings') django.setup() from django.db import connection with connection.cursor() as cursor: try: # Check current columns in django_content_type cursor.execute(\"\"\" SELECT column_name FROM information_schema.columns WHERE table_name='django_content_type' ORDER BY ordinal_position \"\"\") columns = [row[0] for row in cursor.fetchall()] print(f'Current columns: {columns}') # Add missing name column if it doesn't exist if 'name' not in columns: print('Adding missing name column...') cursor.execute('ALTER TABLE django_content_type ADD COLUMN name VARCHAR(100)') print('✓ Name column added') else: print('✓ Name column already exists') # Clear problematic migration records cursor.execute(\"\"\" DELETE FROM django_migrations WHERE (app = 'contenttypes' AND name = '0002_remove_content_type_name') OR (app = 'auth') OR (app = 'api' AND name LIKE '%0026%') \"\"\") print('✓ Cleared problematic migration records') except Exception as e: print(f'Error: {e}') "
  File "<string>", line 1
    import os import django from django.conf import settings os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'soar_backend.settings') django.setup() from django.db import connection with connection.cursor() as cursor: try: # Check current columns in django_content_type cursor.execute(""" SELECT column_name FROM information_schema.columns WHERE table_name='django_content_type' ORDER BY ordinal_position """) columns = [row[0] for row in cursor.fetchall()] print(f'Current columns: {columns}') # Add missing name column if it doesn't exist if 'name' not in columns: print('Adding missing name column...') cursor.execute('ALTER TABLE django_content_type ADD COLUMN name VARCHAR(100)') print('✓ Name column added') else: print('✓ Name column already exists') # Clear problematic migration records cursor.execute(""" DELETE FROM django_migrations WHERE (app = 'contenttypes' AND name = '0002_remove_content_type_name') OR (app = 'auth') OR (app = 'api' AND name LIKE '%0026%') """) print('✓ Cleared problematic migration records') except Exception as e: print(f'Error: {e}') 
IndentationError: unexpected indent